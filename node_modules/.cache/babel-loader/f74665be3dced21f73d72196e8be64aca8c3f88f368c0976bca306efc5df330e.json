{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\azmat\\\\OneDrive\\\\Desktop\\\\React\\\\fetchingApi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/film/\");\n      if (!response.ok) {\n        throw new Error(`something Went wrong! ${realod}`);\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n    const realod = /*#__PURE__*/_jsxDEV(NavBar, {\n      reload: \"Retrying\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/Retrying\",\n        children: !isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n          movies: movies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), !isLoading && movies.length === 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No movies Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 57\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 33\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zuBJAn2dLkBMoQCfa8VUzB2Qvvo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","NavBar","React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","realod","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","length"],"sources":["C:/Users/azmat/OneDrive/Desktop/React/fetchingApi/src/App.js"],"sourcesContent":["import { Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\n\nimport React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading]= useState(false)\n  const [error, setError]=useState(null)\n  \n    \n\n  async function fetchMoviesHandler() {\n    setIsLoading(true)\n    setError(null);\n    try {\n     const response = await fetch(\"https://swapi.dev/api/film/\");\n     if (!response.ok){\n      throw new Error(`something Went wrong! ${realod}`);\n     }\n     const data = await response.json();\n\n     const transformedMovies = data.results.map((movieData) => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      };\n      })\n      setMovies(transformedMovies);\n      \n    }catch(error){\n      setError(error.message);\n    }\n     setIsLoading(false);\n     const realod = <NavBar reload=\"Retrying\" />;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        \n          <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      \n      </section>\n      \n      <section>\n      <Route path=\"/Retrying\">\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n       </Route>\n        {!isLoading && movies.length === 0 && !error && <p>No movies Found</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading..</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,kBAAkB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAExC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAEN,QAAQ,CAAC,KAAK,CAAC;EAChD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAACR,QAAQ,CAAC,IAAI,CAAC;EAItC,eAAeS,kBAAkB,GAAG;IAClCH,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACH,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAC;QAChB,MAAM,IAAIC,KAAK,CAAE,yBAAwBC,MAAO,EAAC,CAAC;MACnD;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;MAElC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAK;QACzD,OAAO;UACLC,EAAE,EAAED,SAAS,CAACE,UAAU;UACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;UACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;UACpCC,WAAW,EAAEN,SAAS,CAACO;QACzB,CAAC;MACD,CAAC,CAAC;MACFvB,SAAS,CAACa,iBAAiB,CAAC;IAE9B,CAAC,QAAMV,KAAK,EAAC;MACXC,QAAQ,CAACD,KAAK,CAACqB,OAAO,CAAC;IACzB;IACCtB,YAAY,CAAC,KAAK,CAAC;IACnB,MAAMQ,MAAM,gBAAG,QAAC,MAAM;MAAC,MAAM,EAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAC9C;EAEA,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb;MAAA,uBAEI;QAAQ,OAAO,EAAEL,kBAAmB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAsB;MAAA;MAAA;MAAA;IAAA,QAEpD,eAEV;MAAA,wBACA,QAAC,KAAK;QAAC,IAAI,EAAC,WAAW;QAAA,UACpB,CAACJ,SAAS,IAAIF,MAAM,CAAC0B,MAAM,GAAG,CAAC,iBAAI,QAAC,UAAU;UAAC,MAAM,EAAE1B;QAAO;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAC3D,EACN,CAACE,SAAS,IAAIF,MAAM,CAAC0B,MAAM,KAAK,CAAC,IAAI,CAACtB,KAAK,iBAAI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAsB,EACrE,CAACF,SAAS,IAAIE,KAAK,iBAAI;QAAA,UAAIA;MAAK;QAAA;QAAA;QAAA;MAAA,QAAK,EACrCF,SAAS,iBAAI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QACtB;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAErB;AAAC,GApDQH,GAAG;AAAA,KAAHA,GAAG;AAsDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}